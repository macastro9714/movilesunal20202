{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Arkai\\\\TikTakToe\\\\src\\\\screens\\\\Game.js\";\nimport React, { useEffect, useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nvar initValues = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n\nvar Button = function Button(_ref) {\n  var index = _ref.index,\n      value = _ref.value,\n      handleTouch = _ref.handleTouch;\n\n  var _useState = useState(value),\n      _useState2 = _slicedToArray(_useState, 2),\n      number = _useState2[0],\n      setNumber = _useState2[1];\n\n  useEffect(function () {\n    console.log(value);\n    setNumber(value);\n  }, [value]);\n  return React.createElement(View, {\n    key: index,\n    style: styles.button,\n    onTouchEnd: function onTouchEnd() {\n      return handleTouch(index);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: styles.text,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }\n  }, number !== 0 ? 'Touched' : 'not'));\n};\n\nvar Game = function Game() {\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      player = _useState4[0],\n      setplayer = _useState4[1];\n\n  var _useState5 = useState(initValues),\n      _useState6 = _slicedToArray(_useState5, 2),\n      values = _useState6[0],\n      setValues = _useState6[1];\n\n  var _handleTouch = function handleTouch(index) {\n    console.log(values);\n    var v = values;\n    v[index] = 1;\n    console.log(values);\n    setValues(v);\n  };\n\n  var renderButtons = function renderButtons() {\n    return values.map(function (value, index) {\n      return React.createElement(Button, {\n        key: index,\n        index: index,\n        value: value,\n        handleTouch: function handleTouch(index) {\n          return _handleTouch(index);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 9\n        }\n      });\n    });\n  };\n\n  return React.createElement(View, {\n    style: styles.gameBoard,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: styles.text,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, values), renderButtons());\n};\n\nvar styles = StyleSheet.create({\n  text: {\n    fontSize: 30\n  },\n  button: {\n    backgroundColor: 'grey',\n    flex: 1,\n    margin: 1,\n    minWidth: 120,\n    maxWidth: 120,\n    height: 120,\n    borderColor: 'black',\n    borderWidth: 2\n  },\n  gameBoard: {\n    padding: '5%',\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'center'\n  }\n});\nexport default Game;","map":{"version":3,"sources":["C:/Users/Arkai/TikTakToe/src/screens/Game.js"],"names":["React","useEffect","useState","initValues","Button","index","value","handleTouch","number","setNumber","console","log","styles","button","text","Game","player","setplayer","values","setValues","v","renderButtons","map","gameBoard","StyleSheet","create","fontSize","backgroundColor","flex","margin","minWidth","maxWidth","height","borderColor","borderWidth","padding","flexDirection","flexWrap","justifyContent"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Text, StyleSheet, View } from 'react-native';\n\nlet initValues = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n\nconst Button = ({ index, value, handleTouch }) => {\n  const [number, setNumber] = useState(value);\n\n  useEffect(() => {\n    console.log(value);\n    setNumber(value);\n  }, [value]);\n\n  return (\n    <View\n      key={index}\n      style={styles.button}\n      onTouchEnd={() => handleTouch(index)}\n    >\n      <Text style={styles.text}>{number !== 0 ? 'Touched' : 'not'}</Text>\n    </View>\n  );\n};\n\nconst Game = () => {\n  const [player, setplayer] = useState(0);\n  const [values, setValues] = useState(initValues);\n\n  const handleTouch = (index) => {\n    console.log(values);\n    let v = values;\n    v[index] = 1;\n    console.log(values);\n    setValues(v);\n  };\n\n  const renderButtons = () => {\n    return values.map((value, index) => {\n      return (\n        <Button\n          key={index}\n          index={index}\n          value={value}\n          handleTouch={(index) => handleTouch(index)}\n        />\n      );\n    });\n  };\n\n  return (\n    <View style={styles.gameBoard}>\n      <Text style={styles.text}>{values}</Text>\n      {renderButtons()}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  text: { fontSize: 30 },\n  button: {\n    backgroundColor: 'grey',\n    flex: 1,\n    margin: 1,\n    minWidth: 120,\n    maxWidth: 120,\n    height: 120,\n    borderColor: 'black',\n    borderWidth: 2,\n  },\n  gameBoard: {\n    padding: '5%',\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'center',\n  },\n});\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}