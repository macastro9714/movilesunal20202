{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nexport function winner(squares) {\n  var lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (var _i = 0; _i < lines.length; _i++) {\n    var _lines$_i = _slicedToArray(lines[_i], 3),\n        a = _lines$_i[0],\n        b = _lines$_i[1],\n        c = _lines$_i[2];\n\n    if (squares[a] !== '' && squares[a] === squares[b] && squares[a] === squares[c] && squares[b] === squares[c]) return squares[a];\n  }\n\n  return null;\n}\n\nfunction arrayToMat(squares) {\n  var mat = [];\n  var k = 0;\n\n  for (var _i2 = 0; _i2 < 3; _i2++) {\n    mat[_i2] = [];\n\n    for (var j = 0; j < 3; j++) {\n      mat[_i2][j] = squares[k++];\n    }\n  }\n\n  return mat;\n}\n\nexport function fullBoard(squares) {\n  for (i in squares) {\n    if (i === '') return true;\n  }\n\n  return false;\n}\n\nfunction hasMovesLeft(mat) {\n  for (var _i3 = 0; _i3 < 3; _i3++) {\n    for (var j = 0; j < 3; j++) {\n      if (mat[_i3][j] === '') return true;\n    }\n  }\n\n  return false;\n}\n\nfunction evaluate(mat, depth) {\n  for (var _i4 = 0; _i4 < 3; _i4++) {\n    if (mat[_i4][0] === mat[_i4][1] && mat[_i4][0] === mat[_i4][2] && mat[_i4][1] === mat[_i4][2]) {\n      if (mat[_i4][0] === 'O') return 100 - depth;\n      if (mat[_i4][0] === 'X') return depth - 100;\n    }\n  }\n\n  for (var j = 0; j < 3; j++) {\n    if (mat[0][j] === mat[1][j] && mat[0][j] === mat[2][j] && mat[1][j] === mat[2][j]) {\n      if (mat[0][j] === 'O') return 100 - depth;\n      if (mat[0][j] === 'X') return depth - 100;\n    }\n  }\n\n  if (mat[0][0] === mat[1][1] && mat[0][0] === mat[2][2] && mat[1][1] === mat[2][2]) {\n    if (mat[0][0] === 'O') return 100 - depth;\n    if (mat[0][0] === 'X') return depth - 100;\n  }\n\n  if (mat[0][2] === mat[1][1] && mat[0][2] === mat[2][0] && mat[1][1] === mat[2][0]) {\n    if (mat[0][2] === 'O') return 100 - depth;\n    if (mat[0][2] === 'X') return depth - 100;\n  }\n\n  return 0;\n}\n\nfunction minmax(mat, depth, get_max) {\n  if (hasMovesLeft(mat) === false) {\n    return evaluate(mat, depth);\n  }\n\n  var val = evaluate(mat, depth);\n  if (val !== 0) return val;\n\n  if (get_max) {\n    var best = -Infinity;\n\n    for (var _i5 = 0; _i5 < 3; _i5++) {\n      for (var j = 0; j < 3; j++) {\n        if (mat[_i5][j] === '') {\n          mat[_i5][j] = 'O';\n          best = Math.max(best, minmax(mat, depth + 1, !get_max));\n          mat[_i5][j] = '';\n        }\n      }\n    }\n\n    return best;\n  } else {\n    var _best = Infinity;\n\n    for (var _i6 = 0; _i6 < 3; _i6++) {\n      for (var _j = 0; _j < 3; _j++) {\n        if (mat[_i6][_j] === '') {\n          mat[_i6][_j] = 'X';\n          _best = Math.min(_best, minmax(mat, depth + 1, !get_max));\n          mat[_i6][_j] = '';\n        }\n      }\n    }\n\n    return _best;\n  }\n}\n\nexport function find_best_move(squares) {\n  var mat = arrayToMat(squares);\n  var val,\n      row = -1,\n      col = -1,\n      best = -Infinity;\n\n  for (var _i7 = 0; _i7 < 3; _i7++) {\n    for (var j = 0; j < 3; j++) {\n      if (mat[_i7][j] === '') {\n        mat[_i7][j] = 'O';\n        val = minmax(mat, 0, false);\n        mat[_i7][j] = '';\n\n        if (val > best) {\n          best = val;\n          row = _i7;\n          col = j;\n        }\n      }\n    }\n  }\n\n  return 3 * row + col;\n}","map":{"version":3,"sources":["C:/Users/Arkai/TikTakToe/src/logic/index.js"],"names":["winner","squares","lines","i","length","a","b","c","arrayToMat","mat","k","j","fullBoard","hasMovesLeft","evaluate","depth","minmax","get_max","val","best","Infinity","Math","max","min","find_best_move","row","col"],"mappings":"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","sourcesContent":["export function winner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n\r\n  for (let i = 0; i < lines.length; i++) {\r\n    let [a, b, c] = lines[i];\r\n    if (\r\n      squares[a] !== '' &&\r\n      squares[a] === squares[b] &&\r\n      squares[a] === squares[c] &&\r\n      squares[b] === squares[c]\r\n    )\r\n      return squares[a];\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction arrayToMat(squares) {\r\n  let mat = [];\r\n  let k = 0;\r\n\r\n  for (let i = 0; i < 3; i++) {\r\n    mat[i] = [];\r\n    for (let j = 0; j < 3; j++) mat[i][j] = squares[k++];\r\n  }\r\n\r\n  return mat;\r\n}\r\n\r\nexport function fullBoard(squares) {\r\n  for (i in squares) {\r\n    if (i === '') return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction hasMovesLeft(mat) {\r\n  // If it has an empty space, keep playing\r\n  for (let i = 0; i < 3; i++) {\r\n    for (let j = 0; j < 3; j++) {\r\n      if (mat[i][j] === '') return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction evaluate(mat, depth) {\r\n  // Check every row\r\n  for (let i = 0; i < 3; i++) {\r\n    if (\r\n      mat[i][0] === mat[i][1] &&\r\n      mat[i][0] === mat[i][2] &&\r\n      mat[i][1] === mat[i][2]\r\n    ) {\r\n      if (mat[i][0] === 'O') return 100 - depth;\r\n      if (mat[i][0] === 'X') return depth - 100;\r\n    }\r\n  }\r\n\r\n  // Check every col\r\n  for (let j = 0; j < 3; j++) {\r\n    if (\r\n      mat[0][j] === mat[1][j] &&\r\n      mat[0][j] === mat[2][j] &&\r\n      mat[1][j] === mat[2][j]\r\n    ) {\r\n      if (mat[0][j] === 'O') return 100 - depth;\r\n      if (mat[0][j] === 'X') return depth - 100;\r\n    }\r\n  }\r\n\r\n  // Check the diagonals\r\n  if (\r\n    mat[0][0] === mat[1][1] &&\r\n    mat[0][0] === mat[2][2] &&\r\n    mat[1][1] === mat[2][2]\r\n  ) {\r\n    if (mat[0][0] === 'O') return 100 - depth;\r\n    if (mat[0][0] === 'X') return depth - 100;\r\n  }\r\n\r\n  if (\r\n    mat[0][2] === mat[1][1] &&\r\n    mat[0][2] === mat[2][0] &&\r\n    mat[1][1] === mat[2][0]\r\n  ) {\r\n    if (mat[0][2] === 'O') return 100 - depth;\r\n    if (mat[0][2] === 'X') return depth - 100;\r\n  }\r\n\r\n  // If the game hasn't finished yet\r\n  return 0;\r\n}\r\n\r\nfunction minmax(mat, depth, get_max) {\r\n  if (hasMovesLeft(mat) === false) {\r\n    return evaluate(mat, depth);\r\n  }\r\n\r\n  let val = evaluate(mat, depth);\r\n\r\n  if (val !== 0) return val;\r\n\r\n  if (get_max) {\r\n    let best = -Infinity;\r\n\r\n    for (let i = 0; i < 3; i++) {\r\n      for (let j = 0; j < 3; j++) {\r\n        if (mat[i][j] === '') {\r\n          mat[i][j] = 'O';\r\n          best = Math.max(best, minmax(mat, depth + 1, !get_max));\r\n          mat[i][j] = '';\r\n        }\r\n      }\r\n    }\r\n\r\n    return best;\r\n  } else {\r\n    let best = Infinity;\r\n\r\n    for (let i = 0; i < 3; i++) {\r\n      for (let j = 0; j < 3; j++) {\r\n        if (mat[i][j] === '') {\r\n          mat[i][j] = 'X';\r\n          best = Math.min(best, minmax(mat, depth + 1, !get_max));\r\n          mat[i][j] = '';\r\n        }\r\n      }\r\n    }\r\n\r\n    return best;\r\n  }\r\n}\r\n\r\nexport function find_best_move(squares) {\r\n  let mat = arrayToMat(squares);\r\n  let val,\r\n    row = -1,\r\n    col = -1,\r\n    best = -Infinity;\r\n\r\n  for (let i = 0; i < 3; i++) {\r\n    for (let j = 0; j < 3; j++) {\r\n      if (mat[i][j] === '') {\r\n        mat[i][j] = 'O';\r\n        val = minmax(mat, 0, false);\r\n        mat[i][j] = '';\r\n\r\n        if (val > best) {\r\n          best = val;\r\n          row = i;\r\n          col = j;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return 3 * row + col;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}