{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Arkai\\\\TikTakToe\\\\src\\\\screens\\\\Game.js\";\nimport React, { useEffect, useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"./Button\";\nimport { winner, hasMovesLeft, find_best_move } from \"../logic/index\";\nvar initValues = ['', '', '', '', '', '', '', '', ''];\n\nvar Game = function Game() {\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      player = _useState2[0],\n      setPlayer = _useState2[1];\n\n  var _useState3 = useState(initValues),\n      _useState4 = _slicedToArray(_useState3, 2),\n      values = _useState4[0],\n      setValues = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      finished = _useState6[0],\n      setFinished = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      win = _useState8[0],\n      setWin = _useState8[1];\n\n  useEffect(function () {\n    var w = winner(values);\n\n    if (w) {\n      setFinished(true);\n      setWin(w);\n    }\n\n    if (player === 1 && !finished) {\n      var move = find_best_move(values);\n      setValues(values.map(function (el, i) {\n        return i === move ? 'X' : el;\n      }));\n      setPlayer(0);\n    }\n  }, values);\n\n  var _handleTouch = function handleTouch(index) {\n    if (player === 0 && values[index] === '') {\n      setValues(values.map(function (el, i) {\n        return i === index ? 'O' : el;\n      }));\n      setPlayer(1);\n    }\n  };\n\n  var renderButtons = function renderButtons() {\n    return values.map(function (value, index) {\n      return React.createElement(Button, {\n        key: index,\n        index: index,\n        value: value,\n        handleTouch: function handleTouch(index) {\n          return _handleTouch(index);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 9\n        }\n      });\n    });\n  };\n\n  return React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.gameBoard,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, renderButtons()), React.createElement(Text, {\n    style: styles.text,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, win === 'O' ? 'Player wins' : 'PC wins'));\n};\n\nvar styles = StyleSheet.create({\n  text: {\n    fontSize: 30\n  },\n  gameBoard: {\n    padding: '5%',\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'center'\n  }\n});\nexport default Game;","map":{"version":3,"sources":["C:/Users/Arkai/TikTakToe/src/screens/Game.js"],"names":["React","useEffect","useState","Button","winner","hasMovesLeft","find_best_move","initValues","Game","player","setPlayer","values","setValues","finished","setFinished","win","setWin","w","move","map","el","i","handleTouch","index","renderButtons","value","styles","gameBoard","text","StyleSheet","create","fontSize","padding","flexDirection","flexWrap","justifyContent"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Text, StyleSheet, View } from 'react-native';\nimport Button from './Button';\nimport { winner, hasMovesLeft, find_best_move } from '../logic/index';\n\nlet initValues = ['', '', '', '', '', '', '', '', ''];\n\nconst Game = () => {\n  const [player, setPlayer] = useState(0);\n  const [values, setValues] = useState(initValues);\n  const [finished, setFinished] = useState(false);\n  const [win, setWin] = useState('');\n\n  useEffect(() => {\n    const w = winner(values);\n\n    if (w) {\n      setFinished(true);\n      setWin(w);\n    }\n\n    if (player === 1 && !finished) {\n      const move = find_best_move(values);\n      setValues(values.map((el, i) => (i === move ? 'X' : el)));\n      setPlayer(0);\n    }\n  }, values);\n\n  const handleTouch = (index) => {\n    if (player === 0 && values[index] === '') {\n      setValues(values.map((el, i) => (i === index ? 'O' : el)));\n      setPlayer(1);\n    }\n  };\n\n  const renderButtons = () => {\n    return values.map((value, index) => {\n      return (\n        <Button\n          key={index}\n          index={index}\n          value={value}\n          handleTouch={(index) => handleTouch(index)}\n        />\n      );\n    });\n  };\n\n  return (\n    <View>\n      <View style={styles.gameBoard}>{renderButtons()}</View>\n      <Text style={styles.text}>{win === 'O' ? 'Player wins' : 'PC wins'}</Text>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  text: { fontSize: 30 },\n  gameBoard: {\n    padding: '5%',\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'center',\n  },\n});\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}